<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>设计模式s on 学习博客</title>
    <link>https://lijianqiang1997.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 设计模式s on 学习博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 Nov 2019 16:59:36 +0800</lastBuildDate>
    
	<atom:link href="https://lijianqiang1997.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>发布订阅模式</title>
      <link>https://lijianqiang1997.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 19 Nov 2019 16:59:36 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>var EventEmiter = (function() { var _events = {}; return { on: function(eventName, fn) { if (!eventName in this._events) { this._events[eventName] = []; } this._events[eventName].push(fn); }, emit: function(eventName) { var _args = Array.prototype.slice.call(arguments, 1), _events = this._events; if (eventName in _events) { _events[eventName].forEach(fn =&amp;gt; { fn.apply(_args); }); } }, off: function(eventName, fn) { var _events = this._events, index; if (eventName in _events) { if (fn) { if(typeof fn === &#39;function&#39;) { index = _events.</description>
    </item>
    
    <item>
      <title>享元模式</title>
      <link>https://lijianqiang1997.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sun, 10 Nov 2019 21:22:29 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</guid>
      <description>var Person = function(sex) { this.sex = sex; } var factory = (function() { var people= {}, return { create: function(sex) { let human = people[sex]; if(human) { return human; }else { people[sex] = human; } } } }()); var manager = function() { var database = {}; return { add: function(id) { var obj = factory.create(&#39;male&#39;); databse[id] = obj; } } }  </description>
    </item>
    
    <item>
      <title>命令模式</title>
      <link>https://lijianqiang1997.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sun, 10 Nov 2019 21:22:29 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</guid>
      <description>var setCommand = function({ element = null, eventType = &amp;quot;onclick&amp;quot;, command = null, commandType = &amp;quot;execute&amp;quot; }) { if (element &amp;amp;&amp;amp; eventType &amp;amp;&amp;amp; typeof element === &amp;quot;object&amp;quot; &amp;amp;&amp;amp; eventType in element) { if (command &amp;amp;&amp;amp; commandType &amp;amp;&amp;amp; typeof command === &amp;quot;object&amp;quot; &amp;amp;&amp;amp; commandType in command) { element[eventType] = command[commandType]; } } }; var command = (function() { let _i = 0; return { execute: function() { _i++; console.log(_i); }, undo: function() { _i--; consoloe.</description>
    </item>
    
    <item>
      <title>职责链模式</title>
      <link>https://lijianqiang1997.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 09 Nov 2019 12:19:59 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/</guid>
      <description>var Chain = function(fn) { this.fn = fn; this.successor = null; } Chain.prototype.run = function() { var result = this.fn &amp;amp;&amp;amp; this.fnfn(..._args); if(result === true) { return this.successor &amp;amp;&amp;amp; this.successor.run.apply(this.successor,arguments) } return result; } Chain.prototype.next = function(fn) { return this.successor = fn instanceof Chain?fn:new Chain(fn); } var fn1 = function() { console.log(1); return true; } var fn2 = function() { console.log(2); return true; } var fn3 = function() { console.</description>
    </item>
    
  </channel>
</rss>