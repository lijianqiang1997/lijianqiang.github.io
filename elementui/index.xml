<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Elementuis on 学习笔记</title>
    <link>https://lijianqiang1997.github.io/elementui/</link>
    <description>Recent content in Elementuis on 学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Nov 2019 21:38:08 +0800</lastBuildDate>
    
	<atom:link href="https://lijianqiang1997.github.io/elementui/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>表单检验函数</title>
      <link>https://lijianqiang1997.github.io/elementui/%E8%A1%A8%E5%8D%95%E6%A3%80%E9%AA%8C%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 23 Nov 2019 21:38:08 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/elementui/%E8%A1%A8%E5%8D%95%E6%A3%80%E9%AA%8C%E5%87%BD%E6%95%B0/</guid>
      <description>src/utils/validate.js // 检查数值 const checkNumber = (rule, value, callback) =&amp;gt; { value===&#39;&#39;||/^-?\d+(\.\d+)?$/.test(value) ? callback() : callback(new Error(&#39;必须是数字值&#39;)) } // 检查正整数 const positiveInt = (rule, value, callback) =&amp;gt; { value = +value; value&amp;gt;0 &amp;amp;&amp;amp; Number.isInteger(value)?callback() : callback(new Error(&#39;必须为正整数&#39;)) } // 检查大于1 const great1 = (rule, value, callback) =&amp;gt; { +value &amp;gt;= 1 ? callback() : callback(new Error(&#39;充值金额不少于1元&#39;)) } // 检查大于0 const great0 = (rule, value, callback) =&amp;gt; { +value &amp;gt;= 0 ?</description>
    </item>
    
    <item>
      <title>Form表单如何在提交时只显示一项错误项</title>
      <link>https://lijianqiang1997.github.io/elementui/form/</link>
      <pubDate>Thu, 14 Nov 2019 20:28:54 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/elementui/form/</guid>
      <description>let form = this.$refs[&amp;quot;ruleForm&amp;quot;]; form.validate(async (valid,fields) =&amp;gt; { try { if(!this.validateConfirmPass()) { throw new Error(&amp;quot;两次密码输入不一致&amp;quot;); } if (valid) { // 调用接口 await myPurse.updateTransactionPassword(this.ruleForm); // 调用成功后的相关操作 ...codes } else { // 清楚不要的检测字段 let fieldsArr = Object.keys(fields); let props = fieldsArr.slice(1); if(props.length) { form.clearValidate(props) } let formEl = form.$el; setTimeout(() =&amp;gt; { let FirstInputEl = formEl .querySelector( &amp;quot;.is-error input[type=&#39;text&#39;],.is-error input[type=&#39;password&#39;],.is-required input[type=&#39;text&#39;],.is-required input[type=&#39;password&#39;]&amp;quot; ); // 使第一个input聚焦 FirstInputEl.focus(); FirstInputEl.scrollIntoViewIfNeeded?FirstInputEl.scrollIntoViewIfNeeded():FirstInputEl.scrollIntoView(); }, 0); throw new Error(fields[fieldsArr[0]][0].message); } } catch (e) { this.</description>
    </item>
    
  </channel>
</rss>