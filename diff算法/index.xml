<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Diff算法s on 学习笔记</title>
    <link>https://lijianqiang1997.github.io/diff%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in Diff算法s on 学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Nov 2019 11:15:10 +0800</lastBuildDate>
    
	<atom:link href="https://lijianqiang1997.github.io/diff%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Snabbdom中的diff算法</title>
      <link>https://lijianqiang1997.github.io/diff%E7%AE%97%E6%B3%95/snabbdom%E4%B8%AD%E7%9A%84diff%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 12 Nov 2019 11:15:10 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/diff%E7%AE%97%E6%B3%95/snabbdom%E4%B8%AD%E7%9A%84diff%E7%AE%97%E6%B3%95/</guid>
      <description>var VNode = function(sel, data, children, text, elm) { this.sel = sel; this.data = data; this.children = children; this.text = text; this.elm = elm; this.key = data === undefined ? undefined : data.key; }; function sameVnode(vnode1, vnode2) { // 索引相同且选择器相同 return vnode1.key === vnode2.key &amp;amp;&amp;amp; vnode1.sel === vnode2.sel; } function createElm(vnode) { var children = vnode.children, sel = vnode.sel; if (sel === &amp;quot;!&amp;quot;) { if (isUndef(vnode.text)) { vnode.text = &amp;quot;&amp;quot;; } vnode.</description>
    </item>
    
    <item>
      <title>Diff算法初学习</title>
      <link>https://lijianqiang1997.github.io/diff%E7%AE%97%E6%B3%95/diff%E7%AE%97%E6%B3%95%E5%88%9D%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Tue, 12 Nov 2019 11:11:44 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/diff%E7%AE%97%E6%B3%95/diff%E7%AE%97%E6%B3%95%E5%88%9D%E5%AD%A6%E4%B9%A0/</guid>
      <description>//diff算法中的三个主要函数分别为patch,patchVnode,updateChildren function sameVnode(vnode1, vnode2) { // 比较唯一键 return vnode1.key === vnode2.key &amp;amp;&amp;amp; vnode1.sel === vnode2.sel; } // 利用虚拟DOM的位置来操作真实DOM var updateChildren = function(oldCh,newCh) { // 如果头头相同,，进入递归,指针右移 // 如果尾尾相同,进入递归,指针左移 // 如果头尾相同,,塞到尾后，头右移，尾左移 // 如果尾头相同,塞到头前，尾左移，头右移 // 如果都不同，创建新头,塞到头前 // oldCh遍历完，则把ch没有遍历的元素全部创建，塞到尾后 // ch遍历完，则把oldCh没有遍历的全部删除 }; // 比对新旧节点 var patchVnode = function(oldVnode, vnode) { // 如果是同一节点,无需分析 if (oldVnode === vnode) { return; } // 分析子节点 else{ let oldChildren = oldVnode.children; let children = vnode.children; if(!oldChildren) { // 将新节点的children全部添加到旧节点 } else if(!</description>
    </item>
    
  </channel>
</rss>