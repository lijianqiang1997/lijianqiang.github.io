<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>学习笔记</title>
    <link>https://lijianqiang1997.github.io/</link>
    <description>Recent content on 学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 Nov 2019 10:40:21 +0800</lastBuildDate>
    
	<atom:link href="https://lijianqiang1997.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>正则demo</title>
      <link>https://lijianqiang1997.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99demo/</link>
      <pubDate>Thu, 28 Nov 2019 10:40:21 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99demo/</guid>
      <description> .success { color: green; }  正则表达式为   (function() { var regEl = document.getElementsByClassName(&#34;regDemo-reg&#34;)[0] textarea = document.getElementsByClassName(&#34;regDemo-textarea&#34;)[0], result = document.getElementsByClassName(&#34;result&#34;)[0] obj = qs.parse(location.search.slice(1)), str = obj.str, regStr = obj.reg, // regExp每次用完都要重新new reg = strToReg(regStr); regEl.textContent = &#34;正则表达式为:&#34;+regStr+&#34;\n&#34;+&#39;匹配字符串为:&#34;&#39;+str+&#39;&#34;&#39;; textarea.addEventListener(&#34;blur&#34;,function() { var value = this.value; result.innerHTML = value === &#34;&#34;?&#34;&#34;:value.replace(strToReg(regStr),function(matches) { return &#34;&#34;+matches+&#34;&#34;; }) }) })();  </description>
    </item>
    
    <item>
      <title>Pratice1</title>
      <link>https://lijianqiang1997.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/pratice1/</link>
      <pubDate>Thu, 28 Nov 2019 09:34:19 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/pratice1/</guid>
      <description>demo
&amp;quot;width-8 width-10 -width-5 width-15.6 width-20-&amp;quot; // 在不修改字符串的情况下匹配&amp;quot;width-8&amp;quot;、&amp;quot;width-10&amp;quot;、&amp;quot;width-15.6&amp;quot; answer: /((?&amp;lt;=^)|(?&amp;lt;=\s))width-\d+(?:\.\d+)?((?=$)|(?=\s))/ig  </description>
    </item>
    
    <item>
      <title>自动生成类插件</title>
      <link>https://lijianqiang1997.github.io/js/%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%B1%BB%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Wed, 27 Nov 2019 16:38:25 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/js/%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%B1%BB%E6%8F%92%E4%BB%B6/</guid>
      <description>  默认规则选项支持
完全自定义的匹配规则
一次性添加多条规则
 如何使用newAutoClass.js if(newAutoClass) { // 添加width、height、margin、padding newAutoClass.addRules({ reg: widthReg, solveFn: commonSolveFn }, { reg: heightReg, solveFn: commonSolveFn }, { reg: marReg, solveFn: marginSolveFn }, { reg: padReg, solveFn: paddingSolveFn }); newAutoClass.run({ unit: &#39;rem&#39;, base: 750 }); }  </description>
    </item>
    
    <item>
      <title>strategy</title>
      <link>https://lijianqiang1997.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8Fdemo/</link>
      <pubDate>Wed, 27 Nov 2019 10:43:51 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8Fdemo/</guid>
      <description>Document    请输入用户名：  请输入密码：  请输入手机号码： 提交     // 策略对象 var strategies = { notEmpty: function(value,errorMessage) { if(value === &#39;&#39;){ return errorMessage } }, betweenValue: function(value,min,max,errorMessage) { if(value max) { return errorMessage; } }, maxLength: function(value,max,errorMessage) { if(value.lengthmax) { return errorMessage } } }; // 环境类 var validator = function(strategies) { this.cache = []; this.strategies = strategies; } validator.prototype.add = function(dom,rules,args,errorMessage) { var _this = this, rule; var addRule = function(dom,rule,args,errorMessage) { if(!</description>
    </item>
    
    <item>
      <title>策略模式</title>
      <link>https://lijianqiang1997.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 26 Nov 2019 23:06:36 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</guid>
      <description>策略模式将算法的使用与实现分离.
一个基于策略模式的程序至少由两部分组成：一部分是策略类，封装了各种算法的实现，另外一部分是环境类Context，Context类接收客户的请求，将请求委托给一个策略类
 利用策略模式实现表单验证 demo
// 策略对象 var strategies = { notEmpty: function(value,errorMessage) { if(value === &#39;&#39;){ return errorMessage } }, betweenValue: function(value,min,max,errorMessage) { if(value &amp;lt; min || value &amp;gt; max) { return errorMessage; } }, maxLength: function(value,max,errorMessage) { if(value.length&amp;gt;max) { return errorMessage } } }; // 环境类 var validator = function(strategies) { this.cache = []; this.strategies = strategies; } validator.prototype.add = function(dom,rules,args,errorMessage) { var _this = this, rule; var addRule = function(dom,rule,args,errorMessage) { if(!</description>
    </item>
    
    <item>
      <title>stroke-dashoffset</title>
      <link>https://lijianqiang1997.github.io/svg/stroke/stroke-dashoffset/</link>
      <pubDate>Tue, 26 Nov 2019 13:23:44 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/svg/stroke/stroke-dashoffset/</guid>
      <description>   stroke-dashoffset 显示属性     值 (百分比相对于viewport) |  | inherit   初始值 1   动画系 yes   规范 SVG 1.1 (2nd Edition)    </description>
    </item>
    
    <item>
      <title>stroke-dasharray</title>
      <link>https://lijianqiang1997.github.io/svg/stroke/stroke-dasharray/</link>
      <pubDate>Tue, 26 Nov 2019 13:12:28 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/svg/stroke/stroke-dasharray/</guid>
      <description>路径绘制动画 css @keyframes line { from { stroke-dasharray: 0 10000; } to { stroke-dasharray: 400 10000; } } .svg-dasharray { animation: 1.5s infinite line; }  html &amp;lt;svg xmlns=&amp;quot;http://www.w3.org/svg/2000&amp;quot; width=&amp;quot;120&amp;quot; height=&amp;quot;120&amp;quot; class=&amp;quot;svg-dasharray&amp;quot; viewBox=&amp;quot;0 0 110 110&amp;quot;&amp;gt; &amp;lt;path d=&amp;quot;M 10 10 h 100 v 100 h -100 z&amp;quot; stroke-width=&amp;quot;2&amp;quot; fill=&amp;quot;none&amp;quot; stroke=&amp;quot;black&amp;quot; /&amp;gt; &amp;lt;/svg&amp;gt;  示例 @keyframes line { from { stroke-dasharray: 0 10000; } to { stroke-dasharray: 400 10000; }</description>
    </item>
    
    <item>
      <title>判断pc或者移动端</title>
      <link>https://lijianqiang1997.github.io/vue/%E5%88%A4%E6%96%ADpc%E6%88%96%E8%80%85%E7%A7%BB%E5%8A%A8%E7%AB%AF/</link>
      <pubDate>Mon, 25 Nov 2019 14:27:54 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/vue/%E5%88%A4%E6%96%ADpc%E6%88%96%E8%80%85%E7%A7%BB%E5%8A%A8%E7%AB%AF/</guid>
      <description>src/router/index.js // 判断PC or mobile router.beforeEach((to, from, next) =&amp;gt; { let browserRedirect = function() { var sUserAgent = navigator.userAgent.toLowerCase(); var bIsIpad = sUserAgent.match(/ipad/i) == &amp;quot;ipad&amp;quot;; var bIsIphoneOs = sUserAgent.match(/iphone os/i) == &amp;quot;iphone os&amp;quot;; var bIsMidp = sUserAgent.match(/midp/i) == &amp;quot;midp&amp;quot;; var bIsUc7 = sUserAgent.match(/rv:1.2.3.4/i) == &amp;quot;rv:1.2.3.4&amp;quot;; var bIsUc = sUserAgent.match(/ucweb/i) == &amp;quot;ucweb&amp;quot;; var bIsAndroid = sUserAgent.match(/android/i) == &amp;quot;android&amp;quot;; var bIsCE = sUserAgent.match(/windows ce/i) == &amp;quot;windows ce&amp;quot;; var bIsWM = sUserAgent.match(/windows mobile/i) == &amp;quot;windows mobile&amp;quot;; if ( bIsIpad || bIsIphoneOs || bIsMidp || bIsUc7 || bIsUc || bIsAndroid || bIsCE || bIsWM ) { return false; } else { return true; } }; let path = to.</description>
    </item>
    
    <item>
      <title>Hugo Menu参数</title>
      <link>https://lijianqiang1997.github.io/github/hugo-menu%E5%8F%82%E6%95%B0/</link>
      <pubDate>Mon, 25 Nov 2019 13:29:04 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/github/hugo-menu%E5%8F%82%E6%95%B0/</guid>
      <description>Menu Entry Variables 类型 默认值 说明     .Menu string     .URL string page’s .RelPermalink    .Page  指向关联menu entry的page object,如果menu entry是通过首页而非配置文件设置时，为非0    .Name string .LinkTitle menu entry的名字   .Identifier string  menu entry的识别码,如果超过一个menu erntries有同样的.Name时必须设置   .Pre HTML  一般为图标   .Post HTML  一般为事件按钮   .Weight int page&amp;rsquo;s .Weight menu entry的权重，也即导航栏的排列顺序   .</description>
    </item>
    
    <item>
      <title>排列组合</title>
      <link>https://lijianqiang1997.github.io/%E8%A1%8C%E6%B5%8B/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/</link>
      <pubDate>Mon, 25 Nov 2019 10:45:24 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/%E8%A1%8C%E6%B5%8B/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/</guid>
      <description>  分类计数原理(加法原理) 分布计数原理(乘法原理) 特殊元素和特殊位置优先策略 相邻元素捆绑策略(捆绑法) 不相邻位置插空策略(插空法) 定序问题倍缩空位插入策略 重复排列问题求幂策略(住店法) 环排问题线排策略 多排问题直排策略 排列组合混合问题先选后排策略 小集团问题先整体后局部策略 元素相同问题隔板策略(隔板法) 正难则反总体淘汰策略 平均分组问题除法策略 构造模型策略 实际操作穷举策略 分解与合成策略 化归策略 树图策略 复杂分类问题表格策略   分类计数原理(加法原理) 完成一件事有n类方法，第一类有m1种不同的方法，第二类有m2种不同的方法，以此类推。完成这一件事有N=m1+m2+...种方法  分布计数原理(乘法原理) 完成一件事需要分成n个步骤，第一步有m1种不同的方法，第二步有m2种不同的方法，以此类推。完成这一件事有N=m1*m2*...种方法   </description>
    </item>
    
    <item>
      <title>导航栏的修改</title>
      <link>https://lijianqiang1997.github.io/github/%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%9A%84%E4%BF%AE%E6%94%B9/</link>
      <pubDate>Mon, 25 Nov 2019 10:18:51 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/github/%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%9A%84%E4%BF%AE%E6%94%B9/</guid>
      <description>@media (max-width: 48em) { .sidevbar-logo__img { max-width: 50%; margin: 0 auto; } .sidebar-nav-item a img,.sidebar-nav-item a svg { display: none; } } @media (min-width: 48em) { .sidevbar-logo__img { margin-left: -5%; } .sidebar-nav { text-align: left; } .sidebar-nav-item a img,.sidebar-nav-item a svg { display: inline-block; margin: 0 .5em 0 0; vertical-align: middle; object-fit: contain; } } .sidebar-nav-item { position: relative; padding-left: 5%; border-right: 1.25rem solid transparent; } .sidebar-nav-item.active{ background: skyblue; background-clip: content-box; -webkit-filter: hue-rotate(45deg); filter: hue-rotate(45deg) } .</description>
    </item>
    
    <item>
      <title>经典语录</title>
      <link>https://lijianqiang1997.github.io/%E7%BB%8F%E5%85%B8%E8%AF%AD%E5%BD%95/%E7%BB%8F%E5%85%B8%E8%AF%AD%E5%BD%95/</link>
      <pubDate>Sun, 24 Nov 2019 22:51:35 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/%E7%BB%8F%E5%85%B8%E8%AF%AD%E5%BD%95/%E7%BB%8F%E5%85%B8%E8%AF%AD%E5%BD%95/</guid>
      <description>  男:无论放在你面前的是真爱还是仙道或是荣华富贵，你都不会看到 女:不是我看不见，而是我不想去看，因为我已经找到了我想要的 </description>
    </item>
    
    <item>
      <title>表单检验函数</title>
      <link>https://lijianqiang1997.github.io/elementui/%E8%A1%A8%E5%8D%95%E6%A3%80%E9%AA%8C%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 23 Nov 2019 21:38:08 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/elementui/%E8%A1%A8%E5%8D%95%E6%A3%80%E9%AA%8C%E5%87%BD%E6%95%B0/</guid>
      <description>src/utils/validate.js // 检查数值 const checkNumber = (rule, value, callback) =&amp;gt; { value===&#39;&#39;||/^-?\d+(\.\d+)?$/.test(value) ? callback() : callback(new Error(&#39;必须是数字值&#39;)) } // 检查正整数 const positiveInt = (rule, value, callback) =&amp;gt; { value = +value; value&amp;gt;0 &amp;amp;&amp;amp; Number.isInteger(value)?callback() : callback(new Error(&#39;必须为正整数&#39;)) } // 检查大于1 const great1 = (rule, value, callback) =&amp;gt; { +value &amp;gt;= 1 ? callback() : callback(new Error(&#39;充值金额不少于1元&#39;)) } // 检查大于0 const great0 = (rule, value, callback) =&amp;gt; { +value &amp;gt;= 0 ?</description>
    </item>
    
    <item>
      <title>分享我封装的axios</title>
      <link>https://lijianqiang1997.github.io/vue/%E5%88%86%E4%BA%AB%E6%88%91%E5%B0%81%E8%A3%85%E7%9A%84axios/</link>
      <pubDate>Sat, 23 Nov 2019 21:25:58 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/vue/%E5%88%86%E4%BA%AB%E6%88%91%E5%B0%81%E8%A3%85%E7%9A%84axios/</guid>
      <description>src/axios/http.js import axios from &amp;quot;axios&amp;quot;; import router from &amp;quot;../router&amp;quot;; import store from &amp;quot;../store/store&amp;quot;; import { Message } from &amp;quot;element-ui&amp;quot;; import apiConfig from &#39;../../config/api.config&#39; import qs from &#39;qs&#39; // let loadingInstance = Loading.service({ fullscreen: true }); const tip = msg =&amp;gt; { Message({ showClose: true, message: msg, type: &amp;quot;error&amp;quot; }); }; let tipBanMessage = (function() { var index =0; return { show: function(msg) { if(index === 0) { index = 1; tip(msg); } }, init: function() { index= 0; } } })(); const concatData = function(data){ const defaultData = { userGuid: localStorage.</description>
    </item>
    
    <item>
      <title>用户长时间未操作自动退出</title>
      <link>https://lijianqiang1997.github.io/vue/%E7%94%A8%E6%88%B7%E9%95%BF%E6%97%B6%E9%97%B4%E6%9C%AA%E6%93%8D%E4%BD%9C%E8%87%AA%E5%8A%A8%E9%80%80%E5%87%BA/</link>
      <pubDate>Fri, 22 Nov 2019 16:38:36 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/vue/%E7%94%A8%E6%88%B7%E9%95%BF%E6%97%B6%E9%97%B4%E6%9C%AA%E6%93%8D%E4%BD%9C%E8%87%AA%E5%8A%A8%E9%80%80%E5%87%BA/</guid>
      <description>app.vue &amp;lt;template&amp;gt; &amp;lt;div id=&amp;quot;app&amp;quot; @click=&amp;quot;isDo&amp;quot;&amp;gt; &amp;lt;router-view /&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; export default { name: &amp;quot;App&amp;quot;, data() { return { lastTime: null, //最后一次点击的时间 currentTime: null, //当前点击的时间 timeOut: 5 * 60 * 1000, timeId: null }; }, methods: { isDo(event) { this.setTimeId(); }, setTimeId() { clearTimeout(this.timeId); this.timeId = setTimeout(() =&amp;gt; { // 如果有用户登录的 if(this.$store.state.username) { // 退出操作 this.$store.dispatch(&amp;quot;OUT&amp;quot;); this.$router.push(&amp;quot;/login?redirect=&amp;quot;+this.$route.fullPath); } }, this.timeOut); } }, created() { this.setTimeId(); } }; &amp;lt;/script&amp;gt;  </description>
    </item>
    
    <item>
      <title>点击子元素跳转回退不丢失数据</title>
      <link>https://lijianqiang1997.github.io/vue/%E7%82%B9%E5%87%BB%E5%AD%90%E5%85%83%E7%B4%A0%E8%B7%B3%E8%BD%AC%E5%9B%9E%E9%80%80%E4%B8%8D%E4%B8%A2%E5%A4%B1%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Fri, 22 Nov 2019 14:30:11 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/vue/%E7%82%B9%E5%87%BB%E5%AD%90%E5%85%83%E7%B4%A0%E8%B7%B3%E8%BD%AC%E5%9B%9E%E9%80%80%E4%B8%8D%E4%B8%A2%E5%A4%B1%E6%95%B0%E6%8D%AE/</guid>
      <description>store.js; import Vue from &amp;quot;vue&amp;quot;; import Vuex from &amp;quot;vuex&amp;quot;; Vue.use(Vuex); const store = new Vuex.Store({ state: { routeHistory: [] } }); export default store;  router.js; import Router from &#39;vue-router&#39; var routerInstance = new Router() //开启routeHistory总线 routerInstance.beforeEach((to,form,next)=&amp;gt;{ store.state.routeHistory.push(to.fullPath); next(); }); export default RouterInstance;  routeHistoryUtil.js import stroe from &#39;./store.js&#39; export default { get: function(num=0) { num = Math.floor(num) || 0; const routeHistory = store.state.routeHistory; let length = routeHistory.length; if(length===0) { return void(0); } num = (num+length) % length; return routeHistory[num]; }， getLast:function() { return this.</description>
    </item>
    
    <item>
      <title>FormData</title>
      <link>https://lijianqiang1997.github.io/ajax/formdata/</link>
      <pubDate>Thu, 21 Nov 2019 15:42:49 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/ajax/formdata/</guid>
      <description>typedef (File or USVString) FormDataEntryValue; [Exposed=(Window,Worker)] interface FormData { constructor(optional HTMLFormElement form); void append(USVString name, USVString value); void append(USVString name, Blob blobValue, optional USVString filename); void delete(USVString name); FormDataEntryValue? get(USVString name); sequence&amp;lt;FormDataEntryValue&amp;gt; getAll(USVString name); boolean has(USVString name); void set(USVString name, USVString value); void set(USVString name, Blob blobValue, optional USVString filename); iterable&amp;lt;USVString, FormDataEntryValue&amp;gt;; };     FormData 类型 说明     has(name) boolean    get(name) FormDataEntryValue    getAll(name) sequence&amp;lt;FormDataEntryValue&amp;gt;    append(name,value) void    append(name,blobValue,filename) void    set(name) void    set(name,blobValue,filename) void    delete(name) void     FormData构造函数 语法: var formData = new FormData(form) form(可选): 一个HTML 上的&amp;lt;form&amp;gt;表单元素——当指定了，这种方式创建的FormData对象会自动将form中的表单值也包含进去，包括文件内容也会被编码之后包含进去。  利用FormData提交表单 &amp;lt;form id=&amp;quot;myForm&amp;quot; name=&amp;quot;myForm&amp;quot;&amp;gt; &amp;lt;div&amp;gt; &amp;lt;label for=&amp;quot;username&amp;quot;&amp;gt;Enter name:&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;username&amp;quot; name=&amp;quot;username&amp;quot;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div&amp;gt; &amp;lt;label for=&amp;quot;useracc&amp;quot;&amp;gt;Enter account number:&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;useracc&amp;quot; name=&amp;quot;useracc&amp;quot;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div&amp;gt; &amp;lt;label for=&amp;quot;userfile&amp;quot;&amp;gt;Upload file:&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;quot;file&amp;quot; id=&amp;quot;userfile&amp;quot; name=&amp;quot;userfile&amp;quot;&amp;gt; &amp;lt;/div&amp;gt;&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Submit!</description>
    </item>
    
    <item>
      <title>发布订阅模式</title>
      <link>https://lijianqiang1997.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 19 Nov 2019 16:59:36 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>var EventEmiter = (function() { var _events = {}; return { on: function(eventName, fn) { if (!eventName in this._events) { this._events[eventName] = []; } this._events[eventName].push(fn); }, emit: function(eventName) { var _args = Array.prototype.slice.call(arguments, 1), _events = this._events; if (eventName in _events) { _events[eventName].forEach(fn =&amp;gt; { fn.apply(_args); }); } }, off: function(eventName, fn) { var _events = this._events, index; if (eventName in _events) { if (fn) { if(typeof fn === &#39;function&#39;) { index = _events.</description>
    </item>
    
    <item>
      <title>神术</title>
      <link>https://lijianqiang1997.github.io/%E8%82%A1%E7%A5%A8/%E7%A5%9E%E6%9C%AF/</link>
      <pubDate>Sun, 17 Nov 2019 21:34:58 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/%E8%82%A1%E7%A5%A8/%E7%A5%9E%E6%9C%AF/</guid>
      <description> 神术价格分析 2X-T // 低点 2T-X // 上涨 (XT)^1/2 回调 x^0.618*t^0.382 源自于地震学 物理学 速度和惯性的概念 天文学有一定联系 目的在如何识别相对最高点，相对低点 每一波高低你都可以初步 动能爆发点一定是动能突破点  </description>
    </item>
    
    <item>
      <title>Form表单如何在提交时只显示一项错误项</title>
      <link>https://lijianqiang1997.github.io/elementui/form/</link>
      <pubDate>Thu, 14 Nov 2019 20:28:54 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/elementui/form/</guid>
      <description>let form = this.$refs[&amp;quot;ruleForm&amp;quot;]; form.validate(async (valid,fields) =&amp;gt; { try { if(!this.validateConfirmPass()) { throw new Error(&amp;quot;两次密码输入不一致&amp;quot;); } if (valid) { // 调用接口 await myPurse.updateTransactionPassword(this.ruleForm); // 调用成功后的相关操作 ...codes } else { // 清楚不要的检测字段 let fieldsArr = Object.keys(fields); let props = fieldsArr.slice(1); if(props.length) { form.clearValidate(props) } let formEl = form.$el; setTimeout(() =&amp;gt; { let FirstInputEl = formEl .querySelector( &amp;quot;.is-error input[type=&#39;text&#39;],.is-error input[type=&#39;password&#39;],.is-required input[type=&#39;text&#39;],.is-required input[type=&#39;password&#39;]&amp;quot; ); // 使第一个input聚焦 FirstInputEl.focus(); FirstInputEl.scrollIntoViewIfNeeded?FirstInputEl.scrollIntoViewIfNeeded():FirstInputEl.scrollIntoView(); }, 0); throw new Error(fields[fieldsArr[0]][0].message); } } catch (e) { this.</description>
    </item>
    
    <item>
      <title>Snabbdom中的diff算法</title>
      <link>https://lijianqiang1997.github.io/diff%E7%AE%97%E6%B3%95/snabbdom%E4%B8%AD%E7%9A%84diff%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 12 Nov 2019 11:15:10 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/diff%E7%AE%97%E6%B3%95/snabbdom%E4%B8%AD%E7%9A%84diff%E7%AE%97%E6%B3%95/</guid>
      <description>var VNode = function(sel, data, children, text, elm) { this.sel = sel; this.data = data; this.children = children; this.text = text; this.elm = elm; this.key = data === undefined ? undefined : data.key; }; function sameVnode(vnode1, vnode2) { // 索引相同且选择器相同 return vnode1.key === vnode2.key &amp;amp;&amp;amp; vnode1.sel === vnode2.sel; } function createElm(vnode) { var children = vnode.children, sel = vnode.sel; if (sel === &amp;quot;!&amp;quot;) { if (isUndef(vnode.text)) { vnode.text = &amp;quot;&amp;quot;; } vnode.</description>
    </item>
    
    <item>
      <title>Diff算法初学习</title>
      <link>https://lijianqiang1997.github.io/diff%E7%AE%97%E6%B3%95/diff%E7%AE%97%E6%B3%95%E5%88%9D%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Tue, 12 Nov 2019 11:11:44 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/diff%E7%AE%97%E6%B3%95/diff%E7%AE%97%E6%B3%95%E5%88%9D%E5%AD%A6%E4%B9%A0/</guid>
      <description>//diff算法中的三个主要函数分别为patch,patchVnode,updateChildren function sameVnode(vnode1, vnode2) { // 比较唯一键 return vnode1.key === vnode2.key &amp;amp;&amp;amp; vnode1.sel === vnode2.sel; } // 利用虚拟DOM的位置来操作真实DOM var updateChildren = function(oldCh,newCh) { // 如果头头相同,，进入递归,指针右移 // 如果尾尾相同,进入递归,指针左移 // 如果头尾相同,,塞到尾后，头右移，尾左移 // 如果尾头相同,塞到头前，尾左移，头右移 // 如果都不同，创建新头,塞到头前 // oldCh遍历完，则把ch没有遍历的元素全部创建，塞到尾后 // ch遍历完，则把oldCh没有遍历的全部删除 }; // 比对新旧节点 var patchVnode = function(oldVnode, vnode) { // 如果是同一节点,无需分析 if (oldVnode === vnode) { return; } // 分析子节点 else{ let oldChildren = oldVnode.children; let children = vnode.children; if(!oldChildren) { // 将新节点的children全部添加到旧节点 } else if(!</description>
    </item>
    
    <item>
      <title>享元模式</title>
      <link>https://lijianqiang1997.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sun, 10 Nov 2019 21:22:29 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</guid>
      <description>var Person = function(sex) { this.sex = sex; } var factory = (function() { var people= {}, return { create: function(sex) { let human = people[sex]; if(human) { return human; }else { people[sex] = human; } } } }()); var manager = function() { var database = {}; return { add: function(id) { var obj = factory.create(&#39;male&#39;); databse[id] = obj; } } }  </description>
    </item>
    
    <item>
      <title>命令模式</title>
      <link>https://lijianqiang1997.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sun, 10 Nov 2019 21:22:29 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</guid>
      <description>var setCommand = function({ element = null, eventType = &amp;quot;onclick&amp;quot;, command = null, commandType = &amp;quot;execute&amp;quot; }) { if (element &amp;amp;&amp;amp; eventType &amp;amp;&amp;amp; typeof element === &amp;quot;object&amp;quot; &amp;amp;&amp;amp; eventType in element) { if (command &amp;amp;&amp;amp; commandType &amp;amp;&amp;amp; typeof command === &amp;quot;object&amp;quot; &amp;amp;&amp;amp; commandType in command) { element[eventType] = command[commandType]; } } }; var command = (function() { let _i = 0; return { execute: function() { _i++; console.log(_i); }, undo: function() { _i--; consoloe.</description>
    </item>
    
    <item>
      <title>职责链模式</title>
      <link>https://lijianqiang1997.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 09 Nov 2019 12:19:59 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/</guid>
      <description>var Chain = function(fn) { this.fn = fn; this.successor = null; } Chain.prototype.run = function() { var result = this.fn &amp;amp;&amp;amp; this.fnfn(..._args); if(result === true) { return this.successor &amp;amp;&amp;amp; this.successor.run.apply(this.successor,arguments) } return result; } Chain.prototype.next = function(fn) { return this.successor = fn instanceof Chain?fn:new Chain(fn); } var fn1 = function() { console.log(1); return true; } var fn2 = function() { console.log(2); return true; } var fn3 = function() { console.</description>
    </item>
    
    <item>
      <title>Window命令初学习</title>
      <link>https://lijianqiang1997.github.io/window%E5%91%BD%E4%BB%A4/window%E5%91%BD%E4%BB%A4%E5%88%9D%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Thu, 31 Oct 2019 18:47:33 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/window%E5%91%BD%E4%BB%A4/window%E5%91%BD%E4%BB%A4%E5%88%9D%E5%AD%A6%E4%B9%A0/</guid>
      <description> chdir和cd(获取当前目录) cd [/d] [&amp;lt;Drive&amp;gt;:][&amp;lt;Path&amp;gt;] cd [..] // 显示或更改目录路径，不同驱动器下是显示 chdir [/d] [&amp;lt;Drive&amp;gt;:][&amp;lt;Path&amp;gt;] chdir [..] // 显示或更改目录路径,不同驱动器下是显示 cd /? 获取帮助 chdir /? 获取帮助  ren和rename(重命名文件) ren [&amp;lt;Drive&amp;gt;:][&amp;lt;Path&amp;gt;]&amp;lt;FileName1&amp;gt; &amp;lt;FileName2&amp;gt; rename [&amp;lt;Drive&amp;gt;:][&amp;lt;Path&amp;gt;]&amp;lt;FileName1&amp;gt; &amp;lt;FileName2&amp;gt; 在重命名文件时，不能指定新的驱动器或路径。 不能使用ren命令在驱动器之间重命名文件，或将文件移动到不同的目录。 可以在 FileName 参数中使用 * 通配符（和 ？ ） 。 FileName2中由通配符表示的字符将与FileName1中的相应字符相同。FileName2必须是唯一的文件名。 如果FileName2与现有文件名相匹配，则ren会显示以下消息： Duplicate file name or file not found 若要将当前目录中的所有 .txt 文件扩展名更改为 .doc 扩展名，请键入： ren *.txt *.doc 若要将目录的名称从 Chap10 更改为 Part10，请键入： ren chap10 part10  cls(清除 &amp;ldquo;命令提示符&amp;rdquo; 窗口) </description>
    </item>
    
    <item>
      <title>Code</title>
      <link>https://lijianqiang1997.github.io/html/code/</link>
      <pubDate>Thu, 31 Oct 2019 15:39:05 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/html/code/</guid>
      <description>&amp;lt;code&amp;gt;元素代表计算机代码的一部分。 这可以是XML元素名称，文件名，计算机程序或计算机可以识别的任何其他字符串。
没有正式的方法可以表明被标记的计算机代码的语言。 希望使用所用语言标记代码元素的作者，例如 这样语法突出显示脚本可以使用正确的规则，可以使用class属性，例如 通过向元素添加前缀为“ language-”的类。
 示例 以下示例显示如何在段落中使用元素来标记元素名称和计算机代码，包括标点符号。 &amp;lt;p&amp;gt;The &amp;lt;code&amp;gt;code&amp;lt;/code&amp;gt; element represents a fragment of computer code.&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; When you call the &amp;lt;code&amp;gt;activate()&amp;lt;/code&amp;gt; method on the &amp;lt;code&amp;gt;robotSnowman&amp;lt;/code&amp;gt; object, the eyes glow. &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;The example below uses the &amp;lt;code&amp;gt;begin&amp;lt;/code&amp;gt; keyword to indicate the start of a statement block. It is paired with an &amp;lt;code&amp;gt;end&amp;lt;/code&amp;gt; keyword, which is followed by the &amp;lt;code&amp;gt;.&amp;lt;/code&amp;gt; punctuation character (full stop) to indicate the end of the program.</description>
    </item>
    
    <item>
      <title>Margin</title>
      <link>https://lijianqiang1997.github.io/%E7%9B%92%E6%A8%A1%E5%9E%8B/margin/</link>
      <pubDate>Thu, 31 Oct 2019 15:27:14 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/%E7%9B%92%E6%A8%A1%E5%9E%8B/margin/</guid>
      <description>page relative(Physical)Margin 属性（页相对外边距属性）
   margin      margin-top(margin-right、margin-bottom、margin-left)    值 &amp;lt;length-percentage&amp;gt; | auto   应用于 所有元素除了internal table elements(table-row-group, table-header-group, table-footer-group, table-row, table-cell, table-column-group, table-column)   默认值 0   百分比 相对于containing block 的logical width   继承性 无   动画性 通过计算值    Flow-relative Margin 属性（页相对外边距属性）
   Flow-relative Margin      margin-block-start    margin-block-end    margin-inline-start    margin-inline-end    margin-block    margin-inline     垂直外边距合并 不会合并的情况  根元素的margin不会合并 If the top and bottom margins of an element with clearance are adjoining, its margins collapse with the adjoining margins of following siblings but that resulting margin does not collapse with the bottom margin of the parent block.</description>
    </item>
    
    <item>
      <title>Picture</title>
      <link>https://lijianqiang1997.github.io/html/picture/</link>
      <pubDate>Thu, 31 Oct 2019 14:35:53 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/html/picture/</guid>
      <description>&amp;lt;picture&amp;gt;:HTMLPictureElement 元素包含0或多个元素和一个元素和可选的script-supporting elements(script、template)混合来为不同设备场景提供图像。浏览会先选择最匹配的元素，如果没有匹配的，就选择元素,所选的图像最终都呈现在img元素占据的空间中
   &amp;lt;source&amp;gt; 说明     src 资源地址   type 资源类型   srcset 在不同情况下使用的图像   sizes 不同页面布局的图像尺寸   media 应用的媒体查询    示例 media 属性 media 属性允许你提供一个用于给用户代理作为选择 &amp;lt;source&amp;gt; 元素的依据的媒体条件(media condition)（类似于媒体查询）。如果这个媒体条件匹配结果为 false，那么这个 &amp;lt;source&amp;gt; 元素会被跳过。 &amp;lt;picture&amp;gt; &amp;lt;source srcset=&amp;quot;mdn-logo-wide.png&amp;quot; media=&amp;quot;(min-width: 600px)&amp;quot;&amp;gt; &amp;lt;img src=&amp;quot;mdn-logo-narrow.png&amp;quot; alt=&amp;quot;MDN&amp;quot;&amp;gt; &amp;lt;/picture&amp;gt;  type 属性 type 属性允许你为 &amp;lt;source&amp;gt; 元素的 srcset 属性指向的资源指定一个 MIME 类型。如果用户代理不支持指定的类型，那么这个 &amp;lt;source&amp;gt; 元素会被跳过 &amp;lt;picture&amp;gt; &amp;lt;source srcset=&amp;quot;mdn-logo.svg&amp;quot; type=&amp;quot;image/svg+xml&amp;quot;&amp;gt; &amp;lt;img src=&amp;quot;mdn-logo.</description>
    </item>
    
    <item>
      <title>使用hugo搭建github博客</title>
      <link>https://lijianqiang1997.github.io/github/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Wed, 30 Oct 2019 10:33:34 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/github/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/</guid>
      <description>完成github托管到本地后
1.https://github.com/gohugoio/hugo/releases下载对应版本的hugo
2.将hugo.exe加入到环境变量
3.执行以下命令
hugo version // 检查安装 hugo new site my // 新建站点my cd my // 进入站点 my hugo new blog.md // 新建文章blog 想要让文章发布显示需要将draft改为false  4.进入themes目录下载主题，这里我下的是hyde
cd themes https://github.com/htr3n/hyde-hyde.git cd ../  5.本地运行
hugo server --theme=hyde  执行完后可以在本地localhost:1313运行
6.部署到github
hugo --theme=hyde --baseUrl=&amp;quot;https://username.github.io&amp;quot; --buildDrafts // 生成页面模板 然后进入public文件下 将文件push到github的username.github.io仓库  </description>
    </item>
    
    <item>
      <title>Stackingcontext(层叠上下文)</title>
      <link>https://lijianqiang1997.github.io/css/%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87/stacking-context%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87/</link>
      <pubDate>Wed, 30 Oct 2019 10:31:17 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/css/%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87/stacking-context%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87/</guid>
      <description>说明：
(1) 位于最下面的background/border特指层叠上下文元素的边框和背景色。每一个层叠顺序规则仅适用于当前层叠上下文元素的小世界。
(2)inline水平盒子指的是包括inline/inline-block/inline-table元素的&amp;rdquo;层叠顺序&amp;rdquo;,它们都是同级别的。 (3)单纯从层叠水平上看,实际上z-index:0和z-index:auto是可以看成是一样的。注意这里的措辞——“单纯从层叠水平看，实际上，定位元素设置z-index：0会建立新的层叠上下文
 如何形成层叠上下文 如何形成层叠上下文 | &amp;mdash;|&amp;mdash; 根元素(html) | z-index不为auto的相对/绝对定位 | z-index不为auto的flex item(即父元素display: flex|inline-flex) | opacity小于1 | transform不为none | mix-blend-mode不为normal | filter不为none | perspective不为none | isolation:isolate | position:fixed | 在 will-change 中指定了任意 CSS 属性，即便你没有直接指定这些属性的值 | -webkit-overflow-scrolling:touch |</description>
    </item>
    
    <item>
      <title>将github仓库关联到本地</title>
      <link>https://lijianqiang1997.github.io/github/%E5%B0%86github%E4%BB%93%E5%BA%93%E5%85%B3%E8%81%94%E5%88%B0%E6%9C%AC%E5%9C%B0/</link>
      <pubDate>Wed, 30 Oct 2019 10:31:17 +0800</pubDate>
      
      <guid>https://lijianqiang1997.github.io/github/%E5%B0%86github%E4%BB%93%E5%BA%93%E5%85%B3%E8%81%94%E5%88%B0%E6%9C%AC%E5%9C%B0/</guid>
      <description>进入github首页，新建一个仓库，命名为你的用户名.github.io(lijianqiang1997.github.io) 进入SSH key设置   2.在本地生成SSH key
ssh-keygen -t rsa -C &amp;quot;xiangshuo1992@gmail.com&amp;quot; //账号  3.记事本打开id_rsa.pub，复制文本，粘贴到要添加的地方 gitBash 操作
cat id_rsa.pub //拷贝秘钥 ssh-rsa开头  4、验证和修改
测试是否成功配置SSH Key
ssh -T git@github.com //运行结果出现类似如下 Hi xiangshuo1992! You&#39;ve successfully authenticated, but GitHub does not provide shell access.  接下来就可以使用git进行愉快的操作了</description>
    </item>
    
  </channel>
</rss>